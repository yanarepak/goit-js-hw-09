{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEtC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAW,C,SAACF,E,MAAUC,GACtBE,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQL,GAERM,EAAON,EAAS,GAElBD,EAAM,G,CAuBZL,EAAOc,iBAAiB,UAnBxB,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAeF,EAAMG,cAAcC,SAEzC,IAAIC,EAAQC,OAAOJ,EAAaZ,MAAMiB,OACtC,MAAMC,EAASF,OAAOJ,EAAaM,OAAOD,OACpCE,EAAOH,OAAOJ,EAAaO,KAAKF,OAEtC,IAAK,IAAIG,EAAW,EAAGA,GAAYF,EAAQE,IACzCtB,EAAcsB,EAASL,GACtBM,MAAK,EAACtB,SAACA,EAAQC,MAAEA,MAChBsB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IACvEyB,OAAI,EAAC1B,SAACA,EAAQC,MAACA,MAChBsB,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoB3B,QAAiBC,MAAU,IACxEe,GAAOI,EAEVxB,EAAOgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form')\n\nfunction createPromise(position, delay) {\n  const dataInfo = {position, delay,};\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(dataInfo)\n      } else {\n        reject(dataInfo)\n      }\n    },delay);\n});\n}\n\nfunction handleSubmit(event){\n  event.preventDefault();\n  const formElements = event.currentTarget.elements;\n\n  let delay = Number(formElements.delay.value);\n  const amount = Number(formElements.amount.value);\n  const step = Number(formElements.step.value);\n\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position,delay)\n    .then(({position, delay}) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)} )\n    .catch(({position,delay}) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)});\n   delay += step;\n  }\n  formEl.reset();\n}\n\nformEl.addEventListener('submit', handleSubmit);\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n//       } else {\n//         reject(Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`))\n//       }\n//     },delay);\n// })\n// }\n\n// function handleSubmit(event){\n//   event.preventDefault();\n//   const formElements = event.currentTarget.elements;\n\n//   let delay = Number(formElements.delay.value);\n//   const amount = Number(formElements.amount.value);\n//   const step = Number(formElements.step.value);\n\n//   for (let position = 0; position <= amount; position++) {\n//     createPromise(position,delay)\n//     .then(value => value)\n//     .catch(error => error);\n//    delay += step;\n//   }\n// }\n\n// formEl.addEventListener('submit', handleSubmit);\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","dataInfo","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","formElements","currentTarget","elements","delay1","Number","value","amount","step","position1","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.8f190a80.js.map"}